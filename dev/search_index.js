var documenterSearchIndex = {"docs":
[{"location":"parcellation.html#parcellation","page":"Parcellation","title":"Parcellation","text":"","category":"section"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"One of the main components of a Connectome is the Parcellation, which comprises a list of regions over which fibre tracts are summarised. ","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"Parcellation","category":"page"},{"location":"parcellation.html#Connectomes.Parcellation","page":"Parcellation","title":"Connectomes.Parcellation","text":"Parcellation(path::String)\n\nA Parcellation type containing information about the underlying parcellation used in a Connectome.  It is simply a collection of Region types. \n\nstruct Parcellation\n    regions::Vector{Region}\nend\n\nExample\n\njulia> parc = Parcellation(Connectomes.connectome_path())\nParcellation with 83 regions\n\n\n\n\n\n","category":"type"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"By default we use the Desikan-Killiany-Tourville (DKT) atlas, provided as standard by FreeSurfer. The parcellation is included within the main connectome file that ships with Connectomes.jl. We can load it like so:","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"using JSServe # hide\nPage(exportable=true, offline=true) # hide\nusing WGLMakie # hide\n\nusing Connectomes\n\nconnectome_path = Connectomes.connectome_path()","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"The parcellation can be loaded from the connectome_path in the following way.","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"parc = Parcellation(connectome_path)","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"A parcellation is simply a collection of Regions.","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"struct Parcellation\n    regions::Vector{Region}\nend","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"Where Regions comprise pertinent information relating to a given region.","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"struct Region\n    ID::Int                 # DKT region ID number\n    Label::String           # Region name\n    Region::String          # Cortical or Subcortical\n    Lobe::String            # Lobe the region belongs to\n    Hemisphere::String      # Hemisphere the region belongs to\n    x::Float64              # x coordinate \n    y::Float64              # y coordinate\n    z::Float64              # z coordinate\nend","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"parc can be numerically indexed to retrieve regions, either as a Int","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"parc[1]\n","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"or a Vector{Int}, which will return a new Parcellation.","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"parc[[1, 2, 3]]","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"If we load a Makie backend, we can conveniently plot the parcellation. Let's say, we  just want to plot the left side of the connectome. We can do the following.","category":"page"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"using WGLMakie\nMakie.inline!(true) # hide\n\nleft_parc = filter(x -> get_hemisphere(x) == \"left\", parc)\n\nplot_parc(left_parc; resolution=(500, 350), view=:left)","category":"page"},{"location":"parcellation.html#API","page":"Parcellation","title":"API","text":"","category":"section"},{"location":"parcellation.html","page":"Parcellation","title":"Parcellation","text":"Region\nget_node_id\nget_label\nget_cortex \nget_lobe\nget_hemisphere\nget_coords\nBase.getindex\nBase.length","category":"page"},{"location":"parcellation.html#Connectomes.Region","page":"Parcellation","title":"Connectomes.Region","text":"Struct\n    ID::Int\n    Label::String\n    Cortex::String\n    Lobe::String\n    Hemisphere::String\n    x::Float64\n    y::Float64\n    z::Float64\nend\n\n\n\n\n\n","category":"type"},{"location":"parcellation.html#Connectomes.get_node_id","page":"Parcellation","title":"Connectomes.get_node_id","text":"get_node_id(roi::Region)\n\nReturn the ID of a Region. \n\nExample\n\njulia>get_node_id(parc[1])\n1\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Connectomes.get_label","page":"Parcellation","title":"Connectomes.get_label","text":"get_label(roi::Region)\n\nReturn the Label of a Region. \n\nExample\n\njulia>get_label(parc[1])\n\"lateralorbitofrontal\"\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Connectomes.get_cortex","page":"Parcellation","title":"Connectomes.get_cortex","text":"get_cortex(roi::Region)\n\nReturn the Cortex of a Region. \n\nExample\n\njulia>get_label(parc[1])\n\"\"cortical\"\"\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Connectomes.get_lobe","page":"Parcellation","title":"Connectomes.get_lobe","text":"get_lobe(roi::Region)\n\nReturn the Lobe of a Region. \n\nExample\n\njulia>get_lobe(parc[1])\n\"\"frontal\"\"\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Connectomes.get_hemisphere","page":"Parcellation","title":"Connectomes.get_hemisphere","text":"get_hemisphere(roi::Region)\n\nReturn the Hemisphere of a Region. \n\nExample\n\njulia>get_hemisphere(parc[1])\n\"\"right\"\"\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Connectomes.get_coords","page":"Parcellation","title":"Connectomes.get_coords","text":"get_coords(roi::Region)\nget_coords(parc::Parcellation)\n\nReturn a Vector{Float64} of (x y z) coordinates of a Region.\n\nExample\n\n>get_coords(parc[1])\n3-element Vector{Float64}:\n  25.00574653668548\n  33.4624935864546\n -16.65079527963058\n\nReturn a Matrix{Float64} of coordinates for all Regions in the Parcellation.\n\nExample\n\n>get_coords(parc)\n83×3 Matrix{Float64}:\n 25.0057  33.4625  -16.6508\n  ⋮   \n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Base.getindex","page":"Parcellation","title":"Base.getindex","text":"Base.getindex(parc::Parcellation, idx::Int)\nBase.getindex(parc::Parcellation, idx::Vector{Int})\n\nIndex the Parcellation by idx::Intand return the correspondingRegion`\n\nExample\n\njulia> parc[1]\nRegion 1: right lateralorbitofrontal\n\nSlice the Parcellation by into subregions given by the idxs.\n\nExample\n\njulia> parc[[1, 2, 3]]\nParcellation with 3 regions\n\n\n\n\n\n","category":"function"},{"location":"parcellation.html#Base.length","page":"Parcellation","title":"Base.length","text":"Base.length(parc::Parcellation)\n\nReturn the number of regions in the Parcellation\n\nExample\n\njulia> length(parc)\n83\n\n\n\n\n\n","category":"function"},{"location":"connectomes.html#connectome","page":"Connectomes","title":"Connectome","text":"","category":"section"},{"location":"connectomes.html","page":"Connectomes","title":"Connectomes","text":"Connectome","category":"page"},{"location":"connectomes.html#Connectomes.Connectome","page":"Connectomes","title":"Connectomes.Connectome","text":"Connectome(path::String; norm=true)\n\nMain type introduced by Connectomes.jl,\n\nstruct Connectome\n        parc::Parcellation\n        graph::SimpleWeightedGraph{Int64, Float64}\n        n_matrix::Matrix{Float64}\n        l_matrix::Matrix{Float64}\n        weight_function::Function\nend\n\nwhere parc is a Parcellation, graph is a  SimpleWeightedGraph encoding a weighted Connectome, n_matrix is  the length matrix and l_matrix is the length matrix and  weight_function defines the weighting of (n, l) that is used  to construct the graph. \n\nExample\n\njulia> filter(Connectome(Connectomes.connectomepath()), 1e-2)\nParcellation: \n83×8 DataFrame\n Row │ ID     Label                 Region       Hemisphere  x          y           z            Lobe      \n     │ Int64  String                String       String      Float64    Float64     Float64      String    \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │     1  lateralorbitofrontal  cortical     right        25.0057    33.4625    -16.6508     frontal\n   2 │     2  parsorbitalis         cortical     right        43.7891    41.4659    -11.8451     frontal\n   3 │     3  frontalpole           cortical     right         9.59579   67.3442     -8.94211    frontal\n   4 │     4  medialorbitofrontal   cortical     right         5.799     40.7383    -15.7166     frontal\n   5 │     5  parstriangularis      cortical     right        48.3993    31.8555      5.60427    frontal\n  ⋮  │   ⋮             ⋮                 ⋮           ⋮           ⋮          ⋮            ⋮           ⋮\n  80 │    80  Left-Accumbens-area   subcortical  left         -8.14103   11.416      -6.32051    subcortex\n  81 │    81  Left-Hippocampus      subcortical  left        -25.5001   -22.6622    -13.6924     temporal\n  82 │    82  Left-Amygdala         subcortical  left        -22.7183    -5.11994   -18.8364     temporal\n  83 │    83  brainstem             subcortical  none         -6.07796  -31.5015    -32.8539     subcortex\n                                                                                            74 rows omitted\nAdjacency Matrix: \n83×83 SparseArrays.SparseMatrixCSC{Float64, Int64} with 392 stored entries:\n⣮⢛⣣⡠⠀⠀⠀⠀⠀⠀⠀⡁⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠉⡺⢺⠒⣒⠄⢀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠂⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠘⠜⠚⣠⣐⡐⠀⠀⣀⡄⠀⠀⠀⠀⠀⠈⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠐⢐⠸⢴⡳⡄⠌⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⡀⠍⠯⡧⡄⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠄⠠⠀⠄⠀⠼⠁⠀⠀⠉⠯⡣⣄⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄\n⠀⠀⠀⠀⠀⠀⠀⠀⠤⠄⠀⠝⠏⠅⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠁\n⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡎⡭⡦⠂⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀\n⠀⠀⠈⠠⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⠋⡏⡩⡕⠀⠄⠀⠀⠐⠐⠀⠀⠀\n⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠉⠡⡦⢥⠁⠀⢰⠶⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠅⠓⢯⣳⣐⠂⠀⠀⢀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⢀⣀⠰⠘⢺⣲⣀⠀⠘⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠂⠐⠀⠘⠃⠀⠀⠀⠘⢪⣲⣔⡂\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠄⠀⠀⠀⠀⠀⠀⠀⠀⠐⠒⠀⠰⠹⠐⠀\n\n\n\n\n\n","category":"type"},{"location":"connectomes.html#Plotting-Example","page":"Connectomes","title":"Plotting Example","text":"","category":"section"},{"location":"connectomes.html","page":"Connectomes","title":"Connectomes","text":"Firstly, you will need to load Connectomes and a plotting backend from the Makie. Connectomes.jl uses the Makie.jl backend to organise and render plots.","category":"page"},{"location":"connectomes.html","page":"Connectomes","title":"Connectomes","text":"There are several plotting methods available in Connectomes.jl. In keeping with the Julia custom, plotting methods ending with a ! add to an existing plot. Whereas those without ! create a Makie Scene.","category":"page"},{"location":"connectomes.html","page":"Connectomes","title":"Connectomes","text":"using JSServe # hide\nPage(exportable=true, offline=true) # hide","category":"page"},{"location":"connectomes.html","page":"Connectomes","title":"Connectomes","text":"using WGLMakie\nMakie.inline!(true) # hide\nusing Connectomes\n\nplot_cortex(resolution=(500, 400))","category":"page"},{"location":"index.html#Connectomes.jl","page":"Home","title":"Connectomes.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This is the documentation for Connectomes.jl, a package made for working with human brain connectomes, simulating dynamical systems on networks and visualising brain related images.","category":"page"},{"location":"index.html#Working-with-Connectomes","page":"Home","title":"Working with Connectomes","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A Connectome is a spatially embedded graph G = (V E). The collection of vertices, V, are labelled nodes corresponding to discrete brain regions given by a particular brain  parcellation, and the edge set, E, denotes edges between these vertices, as inferred from tractography.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"In this package we implement two types: ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Parcellation\nConnectome","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"See their doc pages for more on how to work with and plot each type.","category":"page"}]
}
